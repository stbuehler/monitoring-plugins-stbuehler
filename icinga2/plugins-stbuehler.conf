object CheckCommand "debian-conffile-updates" {
	command = [ PluginContribDir + "/check_debian_conffile_updates" ]
}

object CheckCommand "systemd-failed-units" {
	command = [ PluginContribDir + "/check_systemd_failed_units" ]
}

object CheckCommand "dns-zone" {
	command = [ PluginContribDir + "/check_dns_zone" ]

	arguments = {
		zone = {
			description = "DNS zone to check"
			value = "$dns_zone$"
			skip_key = true
			required = true
		}
		"--skip-hidden-primary" = {
			description = "Whether to compare with hidden primary (SOA mname)"
			set_if = "$dns_zone_skip_hidden_primary$"
		}
		"--auth-tcp" = {
			description = "Use TCP for DNS queries to authoritative servers"
			set_if = "$dns_zone_auth_tcp$"
		}
		"--debug" = {
			description = "Show debug output"
			set_if = "$dns_zone_debug$"
		}
		"--expect-auth" = {
			description = "Make sure listed servers are part of the NS set of the zone"
			value = "$dns_zone_expect_auth$"
		}
		"--private" = {
			description = "Don't check the delegation (i.e. only SOA)"
			set_if = "$dns_zone_private$"
		}
		"--private-reverse" = {
			description = "Don't check the delegation (i.e. only SOA), if the zone is an entry to the reverse zone for private IP addresses"
			set_if = "$dns_zone_private_reverse$"
		}
		"--private-entry" = {
			description = "Mark given zone name(s) as entry to private zones where delegation isn't checked"
			value = "$dns_zone_private_entry$"
		}
		"--resolver" = {
			description = "Use given address as DNS resolver"
			value = "$dns_zone_resolver$"
		}
		"--host" = {
			description = "Make sure zone is hosted on given host"
			value = "$dns_zone_host$"
		}
		"--host-udp" = {
			description = "Check SOA via UDP too (when --auth-tcp is used) for nameserver given via --host"
			set_if = "$dns_zone_host_udp$"
		}
	}

	vars.dns_zone_skip_hidden_primary = false
	vars.dns_zone_auth_tcp = false
	vars.dns_zone_debug = false
	vars.dns_zone_expect_auth = []
	vars.dns_zone_private = false
	vars.dns_zone_private_reverse = true
	vars.dns_zone_private_entry = []
	vars.dns_zone_resolver = []  # skip by default
	vars.dns_zone_host = []  # skip by default
	vars.dns_zone_host_udp = true
}
